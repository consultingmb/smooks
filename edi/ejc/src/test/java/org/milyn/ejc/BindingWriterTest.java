package org.milyn.ejc;


import static org.junit.Assert.assertEquals;

import org.junit.Test;
import org.milyn.javabean.pojogen.JClass;

import java.io.IOException;
import java.io.StringWriter;

public class BindingWriterTest {
    private static final String BINDING_CONFIG_HEADER = "" +
            "<?xml version=\"1.0\"?>\r\n" +
            "<smooks-resource-list xmlns=\"http://www.milyn.org/xsd/smooks-1.1.xsd\"\r\n" +
            "                      xmlns:jb=\"http://www.milyn.org/xsd/smooks/javabean-1.2.xsd\"\r\n" +
            "                      xmlns:edi=\"http://www.milyn.org/xsd/smooks/edi-1.2.xsd\">\r\n" +
            "\r\n" +
            "    <!--\r\n" +
            "        Generated by Smooks EJC (Edifact Java Compiler).\r\n" +
            "    -->\r\n" +
            "\r\n" +
            "    <params>\r\n" +
            "        <param name=\"stream.filter.type\">SAX</param>\r\n" +
            "    </params>\r\n" +
            "    \r\n" +
            "";

    private static final String BINDING_CONFIG_EDIREADER = "" +
            "    <edi:reader mappingModel=\"/com/example/edi/edimappingconfig.xml\" validate=\"false\" />\r\n" +
            "\r\n" +
            "";

    private static final String BINDING_CONFIG_BEAN = "" +
            "    <jb:bean beanId=\"JavaBean\" class=\"com.example.edi.JavaBean\" createOnElement=\"xmltag\">\r\n" +
            "    </jb:bean>\r\n" +
            "";

    private static final String BINDING_CONFIG_FOOTER = "" +
            "\r\n" +
            "</smooks-resource-list>\r\n" +
            "";

    @Test
    public void writeBindingConfigIncludeEdiReader() throws Exception {
        StringWriter result = writeBindingConfig(true);
        String expected = BINDING_CONFIG_HEADER +
                BINDING_CONFIG_EDIREADER +
                BINDING_CONFIG_BEAN +
                BINDING_CONFIG_FOOTER;
        assertEquals(expected, result.toString());
    }

    @Test
    public void writeBindingConfigSkipEdiReader() throws Exception {
        StringWriter result = writeBindingConfig(false);
        String expected = BINDING_CONFIG_HEADER +
                BINDING_CONFIG_BEAN +
                BINDING_CONFIG_FOOTER;
        assertEquals(expected, result.toString());
    }

    private StringWriter writeBindingConfig(boolean includeEdiReader) throws ClassNotFoundException, IOException {
        ClassModel model = newRoot();
        BindingWriter writer = new BindingWriter(model);
        StringWriter result = new StringWriter();
        writer.writeBindingConfig(result, includeEdiReader);
        return result;
    }

    private ClassModel newRoot() {
        ClassModel model = new ClassModel();
        String className = "JavaBean";
        JClass rootClass = new JClass("com.example.edi", className, className).setSerializable();
        BindingConfig rootBeanConfig = new BindingConfig(className, "xmltag", rootClass, null, null);
        model.setRootBeanConfig(rootBeanConfig);
        return model;
    }

}
