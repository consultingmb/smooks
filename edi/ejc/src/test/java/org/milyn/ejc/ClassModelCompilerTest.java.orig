package org.milyn.ejc;

import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;

import org.junit.Test;
import org.milyn.edisax.model.internal.Component;
import org.milyn.edisax.model.internal.Edimap;
import org.milyn.edisax.model.internal.Field;
import org.milyn.edisax.model.internal.Segment;
import org.milyn.edisax.model.internal.SegmentGroup;
import org.milyn.edisax.util.IllegalNameException;

import java.io.IOException;
import java.io.StringWriter;

public class ClassModelCompilerTest {
    private static final String BINDING_CONFIG_FIELD_WITH_MAX_OCCURS = "" +
            "<?xml version=\"1.0\"?>\r\n" +
            "<smooks-resource-list xmlns=\"http://www.milyn.org/xsd/smooks-1.1.xsd\"\r\n" +
            "                      xmlns:jb=\"http://www.milyn.org/xsd/smooks/javabean-1.2.xsd\"\r\n" +
            "                      xmlns:edi=\"http://www.milyn.org/xsd/smooks/edi-1.2.xsd\">\r\n" +
            "\r\n" +
            "    <!--\r\n" +
            "        Generated by Smooks EJC (Edifact Java Compiler).\r\n" +
            "    -->\r\n" +
            "\r\n" +
            "    <params>\r\n" +
            "        <param name=\"stream.filter.type\">SAX</param>\r\n" +
            "    </params>\r\n" +
<<<<<<< HEAD
            "    \r\n" +
            "    <edi:reader mappingModel=\"/com/example/common/edimappingconfig.xml\" validate=\"false\" />\r\n" +
            "\r\n" +
=======
            "\r\n" +
            "    <edi:reader mappingModel=\"/com/example/common/edimappingconfig.xml\" validate=\"false\" />\r\n" +
            "\r\n" +
            "\r\n" +
>>>>>>> issue-127-field-with-cardinality
            "    <jb:bean beanId=\"root\" class=\"com.example.common.Root\" createOnElement=\"root\">\r\n" +
            "        <jb:wiring property=\"odi\" beanIdRef=\"root.ODI\" />\r\n" +
            "    </jb:bean>\r\n" +
            "\r\n" +
            "    <jb:bean beanId=\"root.ODI\" class=\"com.example.common.Odi\" createOnElement=\"root/ODI\">\r\n" +
            "        <jb:wiring property=\"placeLocationIdentification\" beanIdRef=\"root.ODI.Place_location_identification_List\" />\r\n" +
            "    </jb:bean>\r\n" +
            "\r\n" +
            "    <jb:bean beanId=\"root.ODI.Place_location_identification_List\" class=\"java.util.ArrayList\" createOnElement=\"root/ODI\">\r\n" +
            "        <jb:wiring beanIdRef=\"root.ODI.Place_location_identification\" />\r\n" +
            "    </jb:bean>\r\n" +
            "\r\n" +
            "    <jb:bean beanId=\"root.ODI.Place_location_identification\" class=\"java.lang.String\" createOnElement=\"root/ODI/Place_location_identification\">\r\n" +
            "    </jb:bean>\r\n" +
            "\r\n" +
            "</smooks-resource-list>\r\n" +
            "";

    @Test
    public void bindingConfigForFieldWithMaxOccurs() throws IllegalNameException, IOException, ClassNotFoundException {
        Edimap edi = new Edimap();
        Segment odi = newOdiSegment(edi);

        Field place = newField3225();
        place.setMaxOccurs(2);
        odi.addField(place);

        ClassModel model = compile(edi);
        assertThat(model.getRootBeanConfig().getWireBindings(), hasSize(1));
        StringWriter result = writeBindingConfig(model);
        assertEquals(BINDING_CONFIG_FIELD_WITH_MAX_OCCURS, result.toString());
    }

    @Test(expected = EJCException.class)
    public void bindingConfigForDuplicateFieldName() throws IllegalNameException, IOException, ClassNotFoundException {
        Edimap edi = new Edimap();
        Segment odi = newOdiSegment(edi);

        Field place = newField3225();

        // Add field twice
        odi.addField(place);
        odi.addField(place);

        compile(edi);
        fail();
    }

    @Test(expected = EJCException.class)
    public void bindingConfigForDuplicateComponentName() throws IllegalNameException, IOException, ClassNotFoundException {
        Edimap edi = new Edimap();
        Segment odi = newOdiSegment(edi);

        Field field = new Field();
        field.setTruncatable(true);
        field.setXmltag("field");
        odi.addField(field);

        Component component = new Component();
        component.setTruncatable(true);
        component.setXmltag("component");
        component.setDataType("String");

        // Add the component twice
        field.addComponent(component);
        field.addComponent(component);

        compile(edi);
        fail();
    }

    private Field newField3225() {
        Field place = new Field();
        place.setTruncatable(true);
        place.setXmltag("Place_location_identification");
        place.setDataType("String");
        place.setNodeTypeRef("3225");
        return place;
    }

    private Segment newOdiSegment(Edimap edi) {
        SegmentGroup root = new SegmentGroup();
        root.setXmltag("root");
        edi.setSegments(root);

        Segment odi = new Segment();
        odi.setSegcode("ODI");
        odi.setTruncatable(true);
        odi.setXmltag("ODI");
        odi.setNodeTypeRef("ODI");
        root.getSegments().add(odi);
        return odi;
    }

    private ClassModel compile(Edimap edi) throws IllegalNameException {
        String packageName = "com.example.common";

        ClassModelCompiler compiler = new ClassModelCompiler(null, false);
        return compiler.compile(edi, packageName);
    }

    private StringWriter writeBindingConfig(ClassModel model) throws ClassNotFoundException, IOException {
        BindingWriter writer = new BindingWriter(model);
        StringWriter result = new StringWriter();
        writer.writeBindingConfig(result);
        return result;
    }
}
